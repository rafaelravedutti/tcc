/* Iterate over image on CPU architectures */
fn iterate(img : image_struct, body: fn(int, int) -> ()) -> () {
  let block_size = 32; /* Pixels per block */

  for i in step_range(0, img.height - (block_size + 1), block_size) {
    for j in step_range(0, img.width - (block_size + 1), block_size) {
      for k in range(0, block_size - 1) {
        for l in range(0, block_size - 1) {
          let x = j + l;
          let y = i + k;

          body(x, y);
        }
      }
    }
  }

  for i in range(img.width - block_size, img.width - 1) {
    for j in range(0, img.height - 1) {
      body(i, j);
    }
  }

  for i in range(img.height - block_size, img.height - 1) {
    for j in range(0, img.width - (block_size + 1)) {
      body(j, i);
    }
  }
}

/* Square root function */
fn sqrt(a : f64) -> (f64) {
  cpu_intrinsics.sqrt(a)
}

/* Power function */
fn pow(a : f64, b : f64) -> (f64) {
  cpu_intrinsics.pow(a, b)
}

/* Base-e exponential function */
fn exp(a : f64) -> (f64) {
  cpu_intrinsics.exp(a)
}

/* Absolute function */
fn fabs(a : f64) -> (f64) {
  cpu_intrinsics.fabs(a)
}

/* Arctangent function */
fn atan(x : f64) -> (f64) {
  cpu_intrinsics.atan(x)
}

/* Arctangent of y/x function */
fn atan2(y : f64, x : f64) -> (f64) {
  cpu_intrinsics.atan2(y, x)
}
