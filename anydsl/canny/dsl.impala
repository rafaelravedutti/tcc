struct Image {
  data : &mut[f32],
  width : i32,
  height : i32
};

extern "C" {
  fn print_image_data(&[f32], width : i32, height : i32) -> ();
  fn allocate_image_data(width : i32, height : i32) -> (&mut[f32]);
  fn free_image_data(&[f32]) -> ();
  fn float_sqrt(value : f32) -> (f32);
}

fn range(mut min : i32, max : i32, body : fn(int) -> ()) -> () {
  while min < max {
    body(min);
    min++;
  }
}

fn generate_image(width : i32, height : i32) -> Image {
  let mut i = 0;
  let res = Image {
    data: allocate_image_data(width, height),
    width: width,
    height: height
  };

  while(i < width * height) {
    res.data(i) = (i % 10) as f32;
    i++;
  }

  res
}

fn print_image(img : Image) -> () {
  print_image_data(img.data, img.width, img.height);
}

fn destroy_image(img : Image) -> () {
  free_image_data(img.data);
}

fn apply_2d_convolution(img : Image, mask : [[f32 * 3] * 3], mask_size : i32) -> () {
  let anchor = mask_size / 2;

  for x, y in iterate(img) {
    let mut sum = 0.0f;

    for i in range(-anchor, anchor) {
      for j in range(-anchor, anchor) {
        if x + i > (-1) && x + 1 < img.width && y + j > (-1) && y + j < img.height {
          sum += mask(i + anchor)(j + anchor) * img.data((y + j) * img.width + (x + i));
        }
      }
    }

    img.data(y * img.width + x) = sum;
  }
}

fn gaussian_blur(img : Image) -> () {
  let mask = [[0.057118f, 0.124758f, 0.057118f],
              [0.124758f, 0.272496f, 0.124758f],
              [0.057118f, 0.124758f, 0.057118f]];

  apply_2d_convolution(img, mask, 3);
}

fn sobel(img : Image) -> () {
  let mask_x = [[-1.0f,  0.0f,  1.0f],
                [-2.0f,  0.0f,  2.0f],
                [-1.0f,  0.0f,  1.0f]];

  let mask_y = [[-1.0f, -2.0f, -1.0f],
                [0.0f,   0.0f,  0.0f],
                [1.0f,   2.0f,  1.0f]];

  let anchor = 3 / 2;

  for x, y in iterate(img) {
    let mut sum_x = 0.0f;
    let mut sum_y = 0.0f;

    for i in range(-anchor, anchor) {
      for j in range(-anchor, anchor) {
        if x + i > (-1) && x + 1 < img.width && y + j > (-1) && y + j < img.height {
          sum_x += mask_x(i + anchor)(j + anchor) * img.data((y + j) * img.width + (x + i));
          sum_y += mask_y(i + anchor)(j + anchor) * img.data((y + j) * img.width + (x + i));
        }
      }
    }

    img.data(y * img.width + x) = float_sqrt(sum_x * sum_x + sum_y * sum_y);
  }
}
