/* Image data structure */
struct image_struct {
  image : &mut[f64],          /* Image data */
  data : &mut[f64],           /* Image data */
  buffer : &mut[f64],         /* Auxiliary buffer */
  dx : Buffer,                /* Gx matrix */
  dy : Buffer,                /* Gy matrix */
  width : i32,                /* Image width */
  height : i32,               /* Image height */
  loaded : bool,              /* Is the image data loaded from a file? */
  extended_data: Buffer,      /* Data with increased dimensions */
  extended_buffer: Buffer,    /* Buffer with increased dimensions */
};

/* Filter data structure */
struct filter_struct {
  data : Buffer,       /* Filter coefficients */
  size : i32,             /* Filter size */
};

/* Functions implemented in C/C++ files */
extern "C" {
  /* Display usage function */
  fn display_usage(command : &[u8]) -> ();

  /* OpenCV functions for result comparison */
  fn opencv_gaussian(
    img : &mut[f64], mask_size : u8, display : bool
  ) -> (&mut[f64]);
  fn opencv_sobel(
    img : &mut[f64], sx : i32, sy : i32, aperture_size : i32, display : bool
  ) -> (&mut[f64]);
  fn opencv_canny(
    filename : &[u8], low_threshold : f64, high_threshold: f64
  ) -> (&mut[f64]);

  /* OpenCV utils */
  fn load_image(path : &[u8], width : &i32, height : &i32) -> (&mut[f64]);
  fn display_image(img : &mut[f64], title : &[u8], wait : bool) -> ();
  fn write_image(img : &mut[f64], title : &[u8]) -> ();

  /* Stack functions */
  fn stack_init() -> ();
  fn push_conditional(x : i32, y : i32, condition : i32) -> ();
  fn pop(x : &i32, y : &i32) -> i32;

  /* Time */
  fn impala_time() -> f64;

  /* Printing functions */
  fn impala_print(string : &[u8]) -> ();
  fn print_integer(value : i32) -> ();
  fn print_f64(value : f64) -> ();
  fn print_angle_test(angle : f64, result : i32) -> ();
  fn show_statistics(
    corrects : i32, false_positives : i32, false_negatives : i32
  ) -> ();
  fn show_profile_statistics(
    gaussian_time : f64, sobel_time : f64, nms_time : f64, hysteresis_time : f64
  ) -> ();
  fn show_time_statistics(first_time : f64, second_time : f64) -> ();
}

/* Load image form file and saves it into a image_struct structure */
fn image(filename : &[u8]) -> image_struct {
  let mut res : image_struct;     /* Image structure to store the image */
  let pwidth = &mut res.width;    /* Pointer to width */
  let pheight = &mut res.height;  /* Pointer to height */

  /* Loads image using OpenCV */
  res.image = load_image(filename, pwidth, pheight);

  impala_print("Allocating data...");

  /* Stores the image to structure data */
  res.extended_data = alloc_cpu((res.width + 2) * (res.height + 2) * sizeof[f64]());
  res.data = res.extended_data.data(res.width + 3) as &mut[f64];

  impala_print("Allocating buffer...");

  /* Knowing its size, allocates the buffer and directions pointers */
  res.extended_buffer = alloc_cpu((res.width + 2) * (res.height + 2) * sizeof[f64]());
  res.buffer = res.extended_buffer.data(res.width + 3) as &mut[f64];

  impala_print("Allocating directions...");

  /* Allocate Sobel directions */
  res.dx = alloc_cpu((res.width + 2) * (res.height + 2) * sizeof[f64]());
  res.dy = alloc_cpu((res.width + 2) * (res.height + 2) * sizeof[f64]());

  /* Set image as loaded */
  res.loaded = true;

  impala_print("Copying content to result...");

  /* Copy image content to data */
  copy_image_to_data(res.image, res);

  impala_print("Content copied!");

  for x, y in iterate(res) {
    /* Only to compile CUDA kernels */
  }

  res
}

/* Destroys image structure to free memory space */
fn destroy_image(img : image_struct) -> () {
  /* If the image is loaded, then doesn't free its data (it must be free
     after the cv::Mat destructor call) */
  /*
  if !img.loaded {
    release(img.image);
  }
  */

  /* Free buffer and directions pointers */
  release(img.extended_data);
  release(img.extended_buffer);
  release(img.dx);
  release(img.dy);
}

/* Sets image pixel at (x, y) coordinates */
fn set_pixel(img : image_struct, x : i32, y : i32, value : f64) -> () {
  img.data(y * img.width + x) = value;
}

/* Gets image pixel at (x, y) coordinates */
fn get_pixel(img : image_struct, x : i32, y : i32) -> (f64) {
  img.data(y * img.width + x)
}

/* Sets buffer pixel at (x, y) coordinates */
fn set_buffer_pixel(img : image_struct, x : i32, y : i32, value : f64) -> () {
  img.buffer(y * img.width + x) = value;
}

/* Gets buffer pixel at (x, y) coordinates */
fn get_buffer_pixel(img : image_struct, x : i32, y : i32) -> (f64) {
  img.buffer(y * img.width + x)
}

/* Copies buffer data to image data */
fn sync_image_data(img : image_struct) -> () {
  for x, y in iterate(img) {
    img.data(y * img.width + x) = img.buffer(y * img.width + x);
  }
}

/* Copies image data to buffer data */
fn sync_image_buffer(img : image_struct) -> () {
  for x, y in iterate(img) {
    img.buffer(y * img.width + x) = img.data(y * img.width + x);
  }
}

/* Copies OpenCV loaded image to image structure data */
fn copy_image_to_data(image : &mut[f64], img : image_struct) -> () {
  for x, y in @naive_iterate(img) {
    write(img.extended_data, y * img.width + x, image(y * img.width + x));
  }
}

/* Copies image structure data to OpenCV matrix */
fn copy_data_to_image(img : image_struct, image : &mut[f64]) -> () {
  for x, y in @naive_iterate(img) {
    image(y * img.width + x) = read(img.extended_data, y * img.width + x);
  }
}

/* Copies image structure buffer to OpenCV matrix */
fn copy_buffer_to_image(img : image_struct, image : &mut[f64]) -> () {
  for x, y in @naive_iterate(img) {
    image(y * img.width + x) = read(img.extended_buffer, y * img.width + x);
  }
}

/* Performs angle roundness and returns the index to its offsets, this is used
   by the non-maximum supression algorithm */
fn round_angle(angle : f64) -> (i32) {
  let ang = angle + 3.14159 * ((angle < 0.0) as f64);

  /* In degrees: ((abs(angle) + 22.5) / 45) % 4 */
  (((ang + 0.3926991) / 0.785398) as i32) % 4
}

/* Iterates from min to max executing the higher-order function specified */
fn range(mut min : i32, max : i32, body : fn(int) -> ()) -> () {
  while min <= max {
    body(min);
    min++;
  }
}

/* Iterates from min to max executing the higher-order function specified */
fn step_range(mut min : i32, max : i32, step : i32, body : fn(int) -> ()) -> () {
  while min <= max {
    body(min);
    min += step;
  }
}

/* Naive implementation of iterate */
fn naive_iterate(img : image_struct, body: fn(int, int) -> ()) -> () {
  let mut i = 0;
  let mut j = 0;

  while(i < img.width) {
    j = 0;

    while(j < img.height) {
      body(i, j);
      j = j + 1;
    }

    i = i + 1;
  }
}

/* Absolute function for integer */
fn abs(a : i32) -> (i32) {
  a * ((a >= 0) as i32) +
  (-a) * ((a < 0) as i32)
}

/* Generates a 5x1 filter data structure given its coefficients */
fn filter_5x1(mask : [f64 * 5]) -> filter_struct {
  /* Allocates the filter data structure for a 5x1 filter */
  let result = filter_struct {
    data: alloc_cpu(5 * sizeof[f64]()),
    size: 5
  };

  /* Stores the coefficients to the filter data */
  for i in range(0, 4) {
    write(result.data, i, mask(i));
  }

  result
}

/* Apply 2D filter convolution with separable kernels (tiling) */
fn apply_2d_row_convolution(img : image_struct, filter : filter_struct) -> () {
  /* Applies the filter in columns */
  for x, y, arr_in, arr_out, mask in @stencil_iterate(img, filter, false) {
    /* Checks image boundaries */
    let condition = (x > 0 && x < img.width - 1) as f64;

    write(arr_out, y * img.width + x, 0.0);

    for i in @range(-1, 1) {
      write(arr_out, y * img.width + x,
        read(arr_out, y * img.width + x) +
        read(mask, i + 1) * read(arr_in, y * img.width + x + i)
      );
    }
  }

  /* Copies result from buffer to image data */
  //sync_image_data(img);
}

/* Apply 2D filter convolution with separable kernels (tiling) */
fn apply_2d_column_convolution(img : image_struct, filter : filter_struct) -> () {
  /* Applies the filter in rows */
  for x, y, arr_in, arr_out, mask in @stencil_iterate(img, filter, true) {
    /* Checks image boundaries */
    let condition = (y > 0 && y < img.height - 1) as f64;

    write(arr_out, y * img.width + x, 0.0);

    for i in @range(-1, 1) {
      write(arr_out, y * img.width + x,
        read(arr_out, y * img.width + x) +
        read(mask, i + 1) * read(arr_in, (y + 1) * img.width + x)
      );
    }
  }

  /* Copies result from buffer to image data */
  //sync_image_data(img);
}

/* Gaussian filter */
fn gaussian_blur(img : image_struct) -> () {
  /* Generates the separable Gaussian kernel based on the
     OpenCV source code */
  let mut mask_xy : [[f64 * 5] * 5];
  let mut mask_x : [f64 * 5];
  let mut mask_y : [f64 * 5];
  let mut sum_x = 0.0;
  let mut sum_y = 0.0;
  let anchor = 2.0;
  let pi = 3.14159;
  let sigma = 1.1;
  let prod = 1.0 / (2.0 * pi * sigma * sigma);
  let denom = 2.0 * sigma * sigma;

  for i in range(0, 4) {
    let x = (i as f64) - anchor;

    for j in range(0, 4) {
      let y = (j as f64) - anchor;

      mask_xy(i)(j) = prod * exp(-((x * x + y * y) / denom));
    }

    mask_x(i) = exp(-((x * x) / denom));
    mask_y(i) = exp(-((x * x) / denom));
    sum_x += mask_x(i);
    sum_y += mask_y(i);
  }

  sum_x = 1.0 / sum_x;
  sum_y = 1.0 / sum_y;

  for i in range(0, 4) {
    mask_x(i) *= sum_x;
    mask_y(i) *= sum_y;
  }

  apply_2d_row_convolution(img, filter_5x1(mask_x));
  apply_2d_column_convolution(img, filter_5x1(mask_y));
}

/* Sobel filter */
fn sobel(img : image_struct) -> () {
  for x, y, arr_in, arr_out, dx, dy in @sobel_iterate(img, false) {
    /* dx(x,y) = 0.0 */
    write(dx, y * img.width + x, 0.0);

    /* dx(x,y) -= arr_in(x - 1, y - 1) */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) -
      read(arr_in, (y - 1) * img.width + (x - 1))
    );

    /* dx(x,y) -= arr_in(x - 1, y) * 2.0 */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) -
      read(arr_in, y * img.width + (x - 1)) * 2.0
    );

    /* dx(x,y) -= arr_in(x - 1, y + 1) */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) -
      read(arr_in, (y + 1) * img.width + (x - 1))
    );

    /* dx(x,y) += arr_in(x + 1, y - 1) */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) +
      read(arr_in, (y - 1) * img.width + (x + 1))
    );

    /* dx(x,y) += arr_in(x + 1, y) * 2.0 */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) +
      read(arr_in, y * img.width + (x + 1)) * 2.0
    );

    /* dx(x,y) += arr_in(x + 1, y + 1) */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) +
      read(arr_in, (y + 1) * img.width + (x + 1))
    );

    /* dy(x,y) = 0.0 */
    write(dy, y * img.width + x, 0.0);

    /* dy(x,y) -= arr_in(x - 1, y - 1) */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) -
      read(arr_in, (y - 1) * img.width + (x - 1))
    );

    /* dy(x,y) -= arr_in(x, y - 1) * 2.0 */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) -
      read(arr_in, (y - 1) * img.width + x) * 2.0
    );

    /* dy(x,y) -= arr_in(x + 1, y - 1) */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) -
      read(arr_in, (y - 1) * img.width + (x + 1))
    );

    /* dy(x,y) += arr_in(x - 1, y + 1) */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) +
      read(arr_in, (y + 1) * img.width + (x - 1))
    );

    /* dy(x,y) += arr_in(x, y + 1) * 2.0 */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) +
      read(arr_in, (y + 1) * img.width + x) * 2.0
    );

    /* dy(x,y) += arr_in(x + 1, y + 1) */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) +
      read(arr_in, (y + 1) * img.width + (x + 1))
    );

    let condition = (
      ((x - img.width - 3) > 0 && (x - img.width - 3) < img.width - 1) &&
      (y > 0 && y < img.height - 1)
    ) as f64;

    /* dx(x,y) = dx(x,y) * condition */
    write(dx, y * img.width + x,
      read(dx, y * img.width + x) * condition
    );

    /* dy(x,y) = dy(x,y) * condition */
    write(dy, y * img.width + x,
      read(dy, y * img.width + x) * condition
    );

    /* arr_out(x,y) = dx(x,y) * dx(x,y) + dy(x,y) * dy(x,y) */
    write(arr_out, y * img.width + x,
      cuda_intrinsics.sqrt(
        read(dx, y * img.width + x) * read(dx, y * img.width + x) +
        read(dy, y * img.width + x) * read(dy, y * img.width + x)
      )
    );
  }

  //sync_image_data(img);
}

/* Non-maximum supression */
fn non_maximum_supression(img : image_struct) -> () {
  /* Offsets for the angles */
  let offsets = [[1, 1], [-1, 1], [0, 1], [0, 1], [1, 0], [1, 0], [1, 0]];

  /* Go through the image */
  for x, y in @iterate(img) {
    let value = get_buffer_pixel(img, x, y);     /* Pixel value at (x, y) */
    let xs = read(img.dx, y * img.width + x) as i32;
    let ys = read(img.dy, y * img.width + x) as i32;
    let mx = abs(xs);
    let my = abs(ys) << 15;

    let tg22x = mx * 13573;
    let tg67x = tg22x + (mx << 16);

    let cond1 = (my < tg22x) as i32;
    let cond2 = (my > tg67x) as i32;
    let cond3 = (xs ^ ys < 0) as i32;

    let index = (cond1 << 2) + (cond2 << 1) + cond3;

    let nb1_x = x + offsets(index)(0);    /* First neighboor x coordinate */
    let nb1_y = y + offsets(index)(1);    /* First neighboor y coordinate */
    let nb2_x = x - offsets(index)(0);    /* Second neighboor x coordinate */
    let nb2_y = y - offsets(index)(1);    /* Second neighboor y coordinate */
    let mut nb1_value = 0.0;              /* First neighboor value */
    let mut nb2_value = 0.0;              /* Second neighboor value */

    /* Checks if first neighboor's position is valid */
    nb1_value = ((nb1_x >= 0 && nb1_x < img.width &&
                  nb1_y >= 0 && nb1_y < img.height) as f64) *
                  get_buffer_pixel(img, nb1_x, nb1_y);

    /* Checks if second neighboor's position is valid */
    nb2_value = ((nb2_x >= 0 && nb2_x < img.width &&
                  nb2_y >= 0 && nb2_y < img.height) as f64) * 
                  get_buffer_pixel(img, nb2_x, nb2_y);

    /* If the pixel value is less or equal than one of the neighboors' values,
       it's not the local maximum so sets it to zero */
    set_pixel(img, x, y, value * ((value > nb1_value && value > nb2_value) as f64));
  }

  /* Copy buffer data to image data */
  //sync_image_data(img);
}

/* Hysteresis */
fn hysteresis(img : image_struct, low_threshold : f64, high_threshold: f64) -> () {
  /* Initialize the stack */
  stack_init();

  /*
     Go through the image and sets pixel value according to the
     following conditions:

     If pixel value is in the [0,low_threshold] interval, it
     becomes 0 (not an edge)

     If pixel value is in the ]low_threshold,high_threshold] interval,
     it becomes 1 (weak edge)

     If pixel value is in the ]high_threshold, 255[ interval, it becomes
     15 (strong edge)
  */

  for x, y in @iterate(img) {
    let value = get_pixel(img, x, y);

    set_pixel(img, x, y, ((value > low_threshold) as f64) * 1.0 +
                         ((value > high_threshold) as f64) * 14.0);
  }

  for x, y in @naive_iterate(img) {
    let value = get_pixel(img, x, y);

    push_conditional(x, y, 
                      (value > 0.5 && value < 1.5) as i32);
  }

  /* Go through the image and looks for the weak edges to see if they
     have strong edges as neighboors, if that's the case, they are
     considered edges and are set as strong edges. This procedure is
     executed repeatedly until there are no more weak edges to be updated. */

  let mut x = 0;
  let mut y = 0;

  while pop(&mut x, &mut y) != 0 {
    let pixel_value = get_pixel(img, x, y);
    let weak_condition = (pixel_value > 0.5 && pixel_value < 1.5) as f64;
    let mut sum = 0.0;

    for i in range(-1, 1) {
      for j in range(-1, 1) {
        sum += get_pixel(img, x + i, y + j);
      }
    }

    sum *= weak_condition;

    let sum_condition = ((sum > 10.0) as i32);

    set_pixel(img, x, y, pixel_value + (sum_condition as f64) * 14.0);

    for i in range(-1, 1) {
      for j in range(-1, 1) {
        let nb_value = get_pixel(img, x + i, y + j);
        let nb_weak_condition = (nb_value > 0.5 && nb_value < 1.5) as i32;

        push_conditional(x + i, y + j, sum_condition & nb_weak_condition);
      }
    }
  }

  /* Sets strong edges pixels to 255 and other pixels to 0 to
     get the final result */
  for x, y in iterate(img) {
    set_pixel(img, x, y, ((get_pixel(img, x, y) > 10.0) as f64) * 255.0);
  }
}

/* Canny */
fn canny(img : image_struct, low_threshold : f64, high_threshold: f64) -> () {
  let gaussian_time = impala_time();
  gaussian_blur(img);
  let sobel_time = impala_time();
  sobel(img);
  let nms_time = impala_time();
  //@non_maximum_supression(img);
  let hysteresis_time = impala_time();
  //@hysteresis(img, low_threshold * low_threshold, high_threshold * high_threshold);

  show_profile_statistics(
    sobel_time - gaussian_time,
    nms_time - sobel_time,
    hysteresis_time - nms_time,
    impala_time() - hysteresis_time
  );
}

/* Compare the result with the reference (OpenCV Canny) and display
   the statistics */
fn compare_results(img : image_struct, reference : &mut[f64]) -> () {
  let mut corrects = 0;
  let mut false_positives = 0;
  let mut false_negatives = 0;
  let uchar_reference = reference as &mut[u8];

  for x, y in naive_iterate(img) {
    let pixel_value = get_pixel(img, x, y) as i32;
    let pixel_reference = uchar_reference(y * img.width + x) as i32;

    set_pixel(img, x, y, 0.0);
    set_buffer_pixel(img, x, y, 0.0);

    if pixel_value != 0 {
      if pixel_reference != 0 {
        corrects++;
      } else {
        set_pixel(img, x, y, 255.0);
        false_positives++;
      }
    } else if pixel_reference != 0 {
      set_buffer_pixel(img, x, y, 255.0);
      false_negatives++;
    }
  }

  show_statistics(corrects, false_positives, false_negatives);
}
