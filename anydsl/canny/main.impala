fn main(argc : i32, argv : &[&mut [u8]]) -> () {
  /* If there's no image specified, show the command usage */
  if argc < 2 {
    display_usage(argv(0));
  }

  /* Name of file to use for test */
  let filename = argv(1);
  /* Load image from file */
  let img = image(filename);
  /* Low threshold */
  let low_threshold = 40.0f;
  /* High threshold */
  let high_threshold = 120.0f;
  /* Apply OpenCV canny to blurred image */
  let mut opencv_time : f64;
  let opencv_result = opencv_canny(
    filename, low_threshold, high_threshold, &mut opencv_time
  );

  /* Write OpenCV result */
  write_image(opencv_result, "opencv_result.png");

  /* Copy blurred image data to the image structure, then apply
     the Canny filter written in AnyDSL */ 
  let mut anydsl_time = impala_time();
  canny(img, low_threshold, high_threshold);
  anydsl_time = impala_time() - anydsl_time;

  /* Copy content to write */
  copy_data_to_image(img, img.image);

  /* Writes the result */
  write_image(img.image, "anydsl_result.png");

  /* Apply result comparison and display the statistics */
  compare_results(img, opencv_result);

  /* Show time statistics */
  show_time_statistics(opencv_time, anydsl_time);

  /* Display the false positives and false negatives masks */
  copy_data_to_image(img, img.image);
  write_image(img.image, "false_positives.png");
  copy_buffer_to_image(img, img.image);
  write_image(img.image, "false_negatives.png");

  /* Destroys the image structure to free memory space */
  destroy_image(img);
}
