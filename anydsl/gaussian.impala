extern "C" {
  fn read_image(image_path : &[u8]) -> Img;
  fn show_image(image_path : Img) -> ();
}

fn range(mut a: int, b: int, body: fn (int) -> ()) -> () {
  while a < b {
    body(a);
    a += 1;
  }
}

fn gaussian_blur(img: Img) -> Img {
  let mut out = Img {
    data: [img.width * img.height : float],
    width: img.width,
    height: img.height
  };

  let mask = [[0.057118f, 0.124758f, 0.057118f],
              [0.124758f, 0.272496f, 0.124758f],
              [0.057118f, 0.124758f, 0.057118f]];

  field_indices(img, |i| -> () {
    out.data(i) = apply_convolution(mask, img, i);
  }); 

  out
} 

fn apply_convolution(mask: [[float * 3] * 3], img: Img, idx: int) -> float {
  let mut sum = 0.0f;
  let anchor = 3 / 2;

  for i in range(-anchor, anchor + 1) {
    for j in range(-anchor, anchor + 1) {
      sum += img.data(j * img.width + i) * mask(i)(j);
    }
  }

  sum
} 
