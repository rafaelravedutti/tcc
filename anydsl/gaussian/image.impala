struct Image {
  data : &[i32],
  width : i32,
  height : i32
};

extern "C" {
  fn print_image_data(&[i32], width : i32, height : i32) -> ();
  fn allocate_image_data(width : i32, height : i32) -> (&[i32]);
  fn free_image_data(&[i32]) -> ();
}

fn range(mut min : i32, max : i32, body : fn(int) -> ()) -> () {
  while min < max {
    body(min);
    min++;
  }
}

fn generate_image(width : i32, height : i32) -> Image {
  let mut i = 0;
  let mut res = Image {
    data: allocate_image_data(width, height),
    width: width,
    height: height
  };

  while(i < width * height) {
    res.data(i) = i % 10;
    i++;
  }

  res
}

fn print_image(img : Image) -> () {
  print_image_data(img.data, img.width, img.height);
}

fn destroy_image(img : Image) -> () {
  free_image_data(img.data);
}

fn apply_2d_convolution(img : Image, mask : [[f32]], mask_size : i32) -> () {
  _apply_2d_convolution(img.data, img.width, img.height, mask, mask_size);
}

fn _apply_2d_convolution(mut data : &[i32], width: i32, height: i32, mask : [[f32]], mask_size : i32) -> () {
  let dev_id = device_get_id();
  let block_config = device_get_2d_block_config();
  let dimensions = (width, height, 1);
  let anchor = mask_size / 2;


  acc(dev_id, dimensions, block_config, || -> () {
    let x = acc_bidx() * acc_bdimx() + acc_tidx();
    let y = acc_bidy() * acc_bdimy() + acc_tidy();
    let mut sum = 0.0f;

    for i in range(-anchor, anchor) {
      for j in range(-anchor, anchor) {
        if x + i > (-1) && x + i < width && y + j > (-1) && y + j < height {
          sum += mask(i + anchor)(j + anchor) * data((y + j) * width + (x + i));
        }
      }
    }

    data(y * width + x) = sum as i32;
  });
}
